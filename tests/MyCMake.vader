" CMakeClearVars
" --------------

Before (Clear variables):
  CMakeClearVars
  let t:cmake_silent_execute=v:true

Execute (Clear CMake variables):
  let t:cmake_build_dir="a"
  let t:cmake_source_dir="a"
  let t:cmake_silent_execute="a"

  let t:cmake_toolchain="a"
  let t:cmake_cxx_compiler="a"
  let t:cmake_c_compiler="a"
  let t:cmake_cxx_flags="a"
  let t:cmake_c_flags="a"
  let t:cmake_generator="a"
  let t:cmake_build_type="a"
  let t:cmake_install_prefix="a"
  let t:cmake_export_compile_commands="a"
  let t:cmake_user_arguments="a"
  CMakeClearVars

Then (Vars shouldn't exist):
  Assert !exists("t:cmake_build_dir")
  Assert !exists("t:cmake_source_dir")
  Assert !exists("t:cmake_silent_execute")

  Assert !exists("t:cmake_toolchain")
  Assert !exists("t:cmake_cxx_compiler")
  Assert !exists("t:cmake_c_compiler")
  Assert !exists("t:cmake_cxx_flags")
  Assert !exists("t:cmake_c_flags")
  Assert !exists("t:cmake_generator")
  Assert !exists("t:cmake_build_type")
  Assert !exists("t:cmake_install_prefix")
  Assert !exists("t:cmake_export_compile_commands")
  Assert !exists("t:cmake_user_arguments")
  AssertEqual MyCMake#GetArguments(), []

" MyCMake#GetArguments
" -------------
Execute (CMake arguments cxx compiler):
  let t:cmake_cxx_compiler = "cxx"

Then:
  AssertEqual MyCMake#GetArguments(),["-DCMAKE_CXX_COMPILER=cxx"]

Execute (CMake arguments c compiler):
  let t:cmake_c_compiler = "cc"

Then:
  AssertEqual MyCMake#GetArguments(), ["-DCMAKE_C_COMPILER=cc"]

Execute (CMake arguments cxx cflags string):
  let t:cmake_cxx_flags = "cxx_flags"

Then:
  AssertEqual MyCMake#GetArguments(), ["-DCMAKE_CXX_FLAGS=\'cxx_flags\'"]

Execute (CMake arguments c cflags string):
  let t:cmake_c_flags = "c_flags"

Then:
  AssertEqual MyCMake#GetArguments(), ["-DCMAKE_C_FLAGS=\'c_flags\'"]

Execute (CMake arguments cxx cflags list):
  let t:cmake_cxx_flags = ["cxx_flags", "other_flags"]

Then:
  AssertEqual MyCMake#GetArguments(), ["-DCMAKE_CXX_FLAGS=\'cxx_flags other_flags\'"]

Execute (CMake arguments c cflags list):
  let t:cmake_c_flags = ["c_flags", "other_flags"]

Then:
  AssertEqual MyCMake#GetArguments(), ["-DCMAKE_C_FLAGS=\'c_flags other_flags\'"]

Execute (CMake arguments generator):
  let t:cmake_generator = "gen"

Then:
  AssertEqual MyCMake#GetArguments(), ["-G", "\'gen\'"]

Execute (CMake arguments build type):
  let t:cmake_build_type = "bt"

Then:
  AssertEqual MyCMake#GetArguments(), ["-DCMAKE_BUILD_TYPE=bt"]

Execute (CMake arguments install prefix):
  let t:cmake_install_prefix = "ip"

Then:
  AssertEqual MyCMake#GetArguments(), ["-DCMAKE_INSTALL_PREFIX=ip"]

Execute (CMake arguments export compile commands false):
  let t:cmake_export_compile_commands = 0

Then:
  AssertEqual MyCMake#GetArguments(), []

Execute (CMake arguments export compile command true):
  let t:cmake_export_compile_commands = 1

Then:
  AssertEqual MyCMake#GetArguments(), ["-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"]

Execute (CMake arguments user string):
  let t:cmake_user_arguments = "ua"

Then:
  AssertEqual MyCMake#GetArguments(), ["ua"]

Execute (CMake arguments user list):
  let t:cmake_user_arguments = ["u", "a"]

Then:
  AssertEqual MyCMake#GetArguments(), ["u", "a"]

" CMake#IsCMakeProject
" --------------------
Execute (CMake is project no variables):
  CMakeClearVars

Then:
  Assert !MyCMake#IsCMakeProject()

Execute (CMake is project only source):
  let t:cmake_source_dir = "tests/case/cmake_good"

Then:
  Assert !MyCMake#IsCMakeProject()

Execute (CMake is project only build):
  let t:cmake_build_dir = "build/is_cmake_project_only_build"

Then:
  Assert !MyCMake#IsCMakeProject()

Execute (CMake is project no CMakeLists.txt):
  let t:cmake_source_dir = "tests/case/empty"
  let t:cmake_build_dir = "build/is_cmake_project_no_cmakelists_txt"

Then:
  Assert !MyCMake#IsCMakeProject()

Execute (CMake is project valid):
  let t:cmake_source_dir = "tests/case/cmake_good"
  let t:cmake_build_dir = "build/is_cmake_project_valid"

Then:
  Assert MyCMake#IsCMakeProject()

" CMakeConfigure
" --------------
Execute (CMake configure not a project):
  let t:cmake_build_dir = "build/cmake_configure_not_a_project"
  let t:cmake_source_dir = "test/case/empty"

Then:
  Assert !MyCMake#IsCMakeProject()
  Assert !MyCMake#Configure()
  Assert !filereadable(t:cmake_build_dir . "/CMakeCache.txt")
  "Assert !MyCMake#UpdateCompilerCommands()

" CI fails when running this test
" ----------------------------
"Execute (CMake configure bad):
"  let t:cmake_build_dir = "build/cmake_configure_bad"
"  let t:cmake_source_dir = "tests/case/cmake_bad"

"Then:
"  Assert !MyCMake#Configure()
"  Assert filereadable(t:cmake_build_dir . "/CMakeCache.txt")
"  "Assert MyCMake#UpdateCompilerCommands()

Execute (CMake configure good):
  let t:cmake_build_dir = "build/cmake_configure_good"
  let t:cmake_source_dir = "tests/case/cmake_good"
  let t:cmake_export_compile_commands = v:true

Then:
  Assert MyCMake#Configure()
  Assert filereadable(t:cmake_build_dir . "/CMakeCache.txt")
  "Assert MyCMake#UpdateCompilerCommands()
